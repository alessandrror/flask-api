# Setup to initialize project structure

echo "[ `date` ]": "START"

echo "[ `date` ]": "creating virtual env"
python -m venv .venv/

echo "[ `date` ]": "activate venv"
source venv/bin/activate

echo "[ `date` ]": "installing the requirements"
pip install -r requirements.txt

echo "[ `date` ]": "scaffoloding project structure with folders and files"
python template.py

echo "[ `date` ]": "initializing the git repository"
git init

echo "[ `date` ]": "configurating git ignore file"
cat << EOF >> .gitignore
# Virtual enviroment directories
venv/
.venv/

# Cahe files
__pycache__/
*.pyc
*.o

# Local configuration files
.env
instance/
EOF

echo "[ `date` ]": "adding project configs"
cat << EOF >> setup.cfg
[flake8]
extend-ignore = E203
exclude =
    # No need to traverse our git directory
    .git,
    # There's no value in checking cache directories
    __pycache__,
    # The conf file is mostly autogenerated, ignore it
    docs/source/conf.py,
    # The old directory contains Flake8 2.0
    old,
    # This contains our built documentation
    build,
    # This contains builds of flake8 that we don't want to check
    dist
max-complexity = 10
max-line-length = 120
EOF

cat << EOF >> .pre-commit-config.yaml
repos:
-   repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
    -   id: trailing-whitespace
    -   id: end-of-file-fixer
    -   id: check-yaml
    -   id: check-added-large-files
-   repo: https://github.com/psf/black-pre-commit-mirror
    rev: 25.1.0
    hooks:
    -   id: black
        language_version: python3.12.4
        args: ["--line-length=120"]
-   repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
    -   id: isort
        args: ["--profile", "black", "--filter-files"]
-   repo: https://github.com/pycqa/flake8
    rev: 7.2.0
    hooks:
    -   id: flake8
    additional_dependencies: [flake8-docstrings]
EOF

pre-commit install
pre-commit run --all-files

echo "[ `date` ]": "setting github workflows"
mkdir -p .github/workflows/pytest.yml && touch .github/workflows/pytest.yml

cat << EOF >> .github/workflows/pylint.yml
# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Pytest

on: [push, pull_request]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
EOF

mkdir -p .github/workflows/pylint.yml && touch .github/workflows/pylint.yml
cat << EOF >> .github/workflows/pylint.yml
name: Pylint

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py')
EOF

echo "[ `date` ]": "END"
